name: SOI Weekly Parse Run

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: 
  workflow_dispatch:

jobs:
  Run-SOI-Parsing:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Extra packages
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends mupdf libgl1-mesa-glx libgdal-dev gdal-bin gdal-data webp

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.4'

      - name: Restore pip data from cache
        uses: TerrenceHo/cache-always@v0.0.1
        #uses: actions/cache@v2
        with:
          path: ./.venv/
          key: SOI-venv-v2-${{ hashFiles('maps/SOI/requirements.parse.txt') }}
        id: cache-venv

      - name: Setup python requirements
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv ./.venv 
          . ./.venv/bin/activate
          pip install numpy==1.22.3
          pip install GDAL==3.0.4
          pip install -r maps/SOI/requirements.parse.txt
 
      - name: Authenticate with GCP
        run: |
          echo ${{ secrets.GCP_AUTH }} | base64 -d > gauth.json
          gcloud auth activate-service-account --key-file=gauth.json

      - name: Restore mutool from cache
        uses: TerrenceHo/cache-always@v0.0.1
        with:
          path: 'bin/mutool'
          key:  'SOI-mutool-v3'
        id: mutool-cache

      - name: Build mutool
        if: ${{ steps.mutool-cache.outputs.cache-hit != 'true' }}
        run: |
          cp maps/SOI/mupdf.patch .
          bash maps/SOI/build_mutool.sh
 
      - name: Check for work
        id: work
        run: |
          if [[ "$(gsutil ls gs://soi_data/to_parse.txt 2>/dev/null)" == "" ]]; then
            echo "::set-output name=AVAILABLE::false"
          else
            mkdir -p data
            gsutil -m cp gs://soi_data/to_parse.txt data/to_parse.txt
            echo "::set-output name=AVAILABLE::true"
          fi

      - name: Parse SOI sheets
        if: ${{ steps.work.outputs.AVAILABLE == 'true' }} 
        run: |
          gsutil -m cp gs://soi_data/raw/SOI_FONTS.zip data/raw/SOI_FONTS.zip
          gsutil -m cp gs://soi_data/index.geojson data/index.geojson
          cat data/to_parse.txt | cut -d"/" -f2- | xargs -I {} gsutil -m cp gs://soi_data/{} data/{}
          .venv/bin/python maps/SOI/check_duplicates.py data/to_parse.txt
          mkdir -p export/gtiffs/
          FROM_LIST=data/to_parse.txt .venv/bin/python maps/SOI/parse.py
          gsutil rm gs://soi_data/to_parse.txt
          gsutil -m cp -r export/gtiffs/*.tif gs://soi_data/export/gtiffs/
          ls export/gtiffs/*.tif | cut -d"/" -f3 | cut -d"." -f1 > data/to_retile.txt
          gsutil cp data/to_retile.txt gs://soi_data/to_retile.txt
        timeout-minutes: 60
 
      - name: Check for retile work
        id: retile_work
        run: |
          if [[ "$(gsutil ls gs://soi_data/to_retile.txt 2>/dev/null)" == "" ]]; then
            echo "::set-output name=AVAILABLE::false"
          else
            mkdir -p data
            gsutil -m cp gs://soi_data/to_retile.txt data/to_retile.txt
            echo "::set-output name=AVAILABLE::true"
          fi

      - name: Retile sheets
        if: ${{ steps.retile_work.outputs.AVAILABLE == 'true' }} 
        run: |
          mkdir -p export/tiles/
          GOOGLE_APPLICATION_CREDENTIALS=gauth.json FROM_GCS=1 .venv/bin/python maps/SOI/retile.py data/to_retile.txt
          gsutil rm gs://soi_data/to_retile.txt
        timeout-minutes: 60



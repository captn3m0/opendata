name: LGD Daily Run

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: 
  schedule:
    - cron: '15 6 * * *'
  workflow_dispatch:


jobs:
  Run-LGD-Extraction:
    timeout-minutes: 600
    runs-on: ubuntu-latest
    steps:
      - name: Setup swap
        uses: pierotofy/set-swap-space@v1.0
        with:
          swap-size-gb: 10

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.4'

      - name: Restore pip data from cache
        uses: actions/cache@v2
        with:
          path: ./.venv/
          key: lgd-venv-${{ hashFiles('lgd/requirements.txt') }}
        id: cache-venv

      - name: Setup python requirements
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv ./.venv 
          . ./.venv/bin/activate
          pip install -r lgd/requirements.txt

      - name: Install tesseract OCR
        run: |
          #sudo add-apt-repository ppa:alex-p/tesseract-ocr-devel
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr

      - name: Authenticate with GCP
        run: |
          gcloud auth activate-service-account --key-file=<(echo ${{ secrets.GCP_AUTH }} | base64 -d)

      - name: Restore tesseract models from cache
        uses: actions/cache@v2
        with:
          path: 'models/' 
          key:  'lgd-tesseract-models-gcs-v2'
        id: models-cache

      - name: Download tesseract models from gcs
        if: ${{ steps.models-cache.outputs.cache-hit != 'true' }}
        run: |
          mkdir -p models/
          gsutil -m cp -r gs://lgd_captcha_tesseract_models/* models/

      - name: Get current date
        run: echo "::set-output name=date::$(date +'%d%b%Y')"
        id: date

      - name: Restore daily run data from cache
        uses: TerrenceHo/cache-always@v0.0.1
        with:
          path: |
            data/raw/${{ steps.date.outputs.date }}
            data/raw/${{ steps.date.outputs.date }}.zip
          key:  lgd-data-raw-v1-${{ steps.date.outputs.date }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            lgd-data-raw-v1-${{ steps.date.outputs.date }}-${{ github.run_number }}-
            lgd-data-raw-v1-${{ steps.date.outputs.date }}-

      - name: Restore changes data from cache
        uses: TerrenceHo/cache-always@v0.0.1
        with:
          path: data/raw/changes 
          key:  lgd-data-raw-changes-v0-${{ steps.date.outputs.date }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            lgd-data-raw-changes-v0-${{ steps.date.outputs.date }}-${{ github.run_number }}-
            lgd-data-raw-changes-v0-${{ steps.date.outputs.date }}-
        id: changes_cache

      - name: Download changes file from gcs
        if: ${{ steps.changes_cache.outputs.cache-hit != 'true' && steps.changes_cache.outputs.cache-hit != 'false' }}
        run: |
          echo cachehit is a${{ steps.changes_cache.outputs.cache-hit }}a
          mkdir -p data/raw/changes
          gsutil -m cp -r gs://lgd_data_raw/changes/* data/raw/changes/

      - name: Download LGD data
        run: |
          .venv/bin/python -m lgd.scrape -m RUN -l INFO -R 300 --use-procs -p 10 --archive-data --captcha-model-dir models
        timeout-minutes: 300

      - name: Cleanup Processes
        if: ${{ always() }}
        run: |
          ps -fe | grep "\.venv/bin/python" 
          ps -fe | grep "\.venv/bin/python" | grep -v grep | tr -s " " | cut -d" " -f2 | xargs kill || true

      - name: Upload archive file to gcs
        run: |
          gsutil -m cp data/raw/${{ steps.date.outputs.date }}.zip gs://lgd_data_archive/

      - name: Upload changes file to gcs
        run: |
          gsutil -m cp -r data/raw/changes/* gs://lgd_data_raw/changes/

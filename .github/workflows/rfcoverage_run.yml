name: RFCoverage Monthly Run

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: 
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  Run-RFCoverage-Extraction:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.4'

      - name: Restore pip data from cache
        uses: actions/cache@v2
        with:
          path: ./.venv/
          key: $venv-${{ hashFiles('rfcoverage/requirements.txt') }}
        id: cache-venv

      - name: Setup python requirements
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv ./.venv 
          . ./.venv/bin/activate
          pip install -r rfcoverage/requirements.txt

      - name: Get current date
        run: echo "::set-output name=date::$(date +'%d%b%Y')"
        id: date

      - name: Restore daily run data from cache
        uses: TerrenceHo/cache-always@v0.0.1
        with:
          path: |
            data/
          key:  data-raw-rfcoverage-${{ steps.date.outputs.date }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            data-raw-rfcoverage-${{ steps.date.outputs.date }}-${{ github.run_number }}-
            data-raw-rfcoverage-${{ steps.date.outputs.date }}-

      - name: Authenticate with GCP
        run: |
          gcloud auth activate-service-account --key-file=<(echo ${{ secrets.GCP_AUTH }} | base64 -d)

      - name: Download Rfcoverage data
        run: |
          .venv/bin/python rfcoverage/scrape.py
        timeout-minutes: 20

      - name: Merge with old data from GCP and push
        run: |
          gsutil cp gs://rfcoverage_data/network_data.csv.gz data/
          gunzip data/network_data.csv.gz 
          mv data/network_data.csv data/network_data_old.csv
          .venv/bin/python rfcoverage/combine.py
          gzip data/network_data.csv
          gsutil cp data/network_data.csv.gz gs://rfcoverage_data/network_data.csv.gz
          rm -rf data/
        timeout-minutes: 20

      - name: Cleanup Processes
        if: always()
        run: |
          ps -fe | grep "\.venv/bin/python" 
          ps -fe | grep "\.venv/bin/python" | grep -v grep | tr -s " " | cut -d" " -f2 | xargs kill || true


  RFCoverage-failure-notify:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    needs: [Run-RFCoverage-Extraction]
    if: always() && needs.Run-RFCoverage-Extraction.result == 'failure'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Send PushBullet notification
        uses: ./.github/actions/pb-alert
        secrets: inherit
        with:
          title: "RF Coverage Pull run failed"

name: Daily Run

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: 
  schedule:
    - cron: '15 6 * * *'
  push:
    branches:
      - master

jobs:
  Setup-Pip-Cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.4'

      - name: Restore pip data from cache
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: ./.venv/
          key: $venv-${{ hashFiles('lgd/requirements.txt') }}

      - name: Setup python requirements
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv ./.venv 
          . ./.venv/bin/activate
          pip install -r lgd/requirements.txt

  Setup-Models-Cache:
    runs-on: ubuntu-latest
    steps:
      - name: Restore tesseract models from cache
        uses: actions/cache@v2
        with:
          path: 'models/' 
          key:  'lgd-tesseract-models-gcs-v2'
        id: models-cache

      - name: Download tesseract models from gcs
        if: ${{ steps.models-cache.outputs.cache-hit != 'true' }}
        run: |
          gcloud auth activate-service-account --key-file=<(echo ${{ secrets.GCP_AUTH }} | base64 -d)
          mkdir -p models/
          gsutil -m cp -r gs://lgd_captcha_tesseract_models/* models/

  Run-LGD-Extraction:
    #continue-on-error: true
    timeout-minutes: 600
    runs-on: ubuntu-latest
    needs: [ 'Setup-Pip-Cache', 'Setup-Models-Cache' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.4'

      - name: Restore pip data from cache
        uses: actions/cache@v2
        id: cache-venv  # name for referring later
        with:
          path: ./.venv/  # what we cache: the virtualenv
          # The cache key depends on requirements.txt
          key: $venv-${{ hashFiles('lgd/requirements.txt') }}

      - name: Check pip setup
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "::error pip cache not found"
          exit 1

      - name: Install tesseract OCR
        run: |
          sudo add-apt-repository ppa:alex-p/tesseract-ocr-devel
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr

      - name: Restore tesseract models from cache
        uses: actions/cache@v2
        with:
          path: 'models/' 
          key:  'lgd-tesseract-models-gcs-v2'
        id: models-cache

      - name: Check tesseract models
        if: ${{ steps.models-cache.outputs.cache-hit != 'true' }}
        run: |
          echo "::error models cache not found"
          exit 1

      - name: Set current date as env variable
        run: echo "::set-output name=date::$(date +'%d%b%Y')"
        id: date

      - name: Restore daily run data from cache
        uses: TerrenceHo/cache-always@v0.0.1
        with:
          path: 'data/raw/${{ steps.date.outputs.date }}' 
          key:  'data-raw-v2-${{ steps.date.outputs.date }}'

      - name: Authorize with GCP
        run: |
          gcloud auth activate-service-account --key-file=<(echo ${{ secrets.GCP_AUTH }} | base64 -d)

      - name: Restore changes data from cache
        uses: TerrenceHo/cache-always@v0.0.1
        with:
          path: 'data/raw/changes' 
          key:  'data-raw-changes-v2-${{ steps.date.outputs.date }}'
        id: changes_cache

      - name: Download changes file from gcs
        if: ${{ steps.changes_cache.outputs.cache-hit != 'true' }}
        run: |
          mkdir -p data/raw/changes
          gsutil -m cp -r gs://lgd_data_raw/changes/* data/raw/changes/

      - name: Download LGD data
        run: .venv/bin/python -m lgd.scrape -m RUN -l DEBUG -R 300 --use-procs -p 8 --archive-data --captcha-model-dir models
        timeout-minutes: 360

      - name: Upload archive file to gcs
        run: |
          gsutil -m cp -r data/raw/${{ steps.date.outputs.date }}/ gs://lgd_data_archive/

      - name: Upload changes file to gcs
        run: |
          gsutil -m cp -r data/raw/changes/* gs://lgd_data_raw/changes/


